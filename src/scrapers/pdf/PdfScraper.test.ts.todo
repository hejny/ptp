import { describe, expect, it } from '@jest/globals';
import { join } from 'node:path';
import { $provideLlmToolsForTestingAndScriptsAndPlayground } from '../../llm-providers/_common/register/$provideLlmToolsForTestingAndScriptsAndPlayground';
import { makeKnowledgeSourceHandler } from '../_common/utils/makeKnowledgeSourceHandler';
import { pdfScraper } from './PdfScraper';

// TODO: [ðŸ“‡] Uncomment this test

describe('how creating knowledge from pdf works', () => {

const rootDirname =  join(__dirname, 'examples');
    const pdfScraper = new PdfScraper(
        { llm: await $provideLlmToolsForTestingAndScriptsAndPlayground() },
        {
            rootDirname,
        },
    );

  it('should scrape simple information from a .pdf file', () =>
    expect(
      Promise.resolve()
        .then(() => makeKnowledgeSourceHandler(join(__dirname, 'examples/10-simple.pdf'),{rootDirname}))
        .then((sourceHandler) =>
          pdfScraper.scrape(sourceHandler),
        )
        .then((knowledge) => knowledge?.map(({ content }) => ({ content })))
        .then((knowledge) => knowledge?.slice(0, 1)),
    ).resolves.toMatchObject([
      {
        content: expect.stringMatching(/Springfield (is )?.*/i),
      },
    ]));

  it('should NOT scrape irrelevant information', () =>
    expect(
      Promise.resolve()
        .then(() => makeKnowledgeSourceHandler(join(__dirname, 'examples/10-simple.pdf'),{rootDirname}))
        .then((sourceHandler) =>
          pdfScraper.scrape(sourceHandler),
        )
        .then((knowledge) => knowledge?.map(({ content }) => ({ content })))
        .then((knowledge) => knowledge?.slice(0, 1)),
    ).resolves.toMatchObject([
      {
        content: expect.not.stringMatching(/London (is )?.*/i),
      },
    ]));
});

/**
 * TODO: [ðŸ““] Maybe test all file in examples (not just 10-simple.pdf)
 */

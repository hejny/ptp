import { describe, expect, it } from '@jest/globals';
import { join } from 'path';
import { getLlmToolsForTestingAndScriptsAndPlayground } from '../../llm-providers/_common/getLlmToolsForTestingAndScriptsAndPlayground';
import { makeKnowledgeSourceHandler } from '../_common/utils/makeKnowledgeSourceHandler';
import { pdfScraper } from './pdfScraper';

// TODO: !!!!!! Uncomment this test

describe('how creating knowledge from pdf works', () => {
  it('should scrape simple information from a .pdf file', () =>
    expect(
      Promise.resolve()
        .then(() => makeKnowledgeSourceHandler(join(__dirname, 'samples/10-simple.pdf')))
        .then((options) =>
          pdfScraper.scrape(options, {
            llmTools: getLlmToolsForTestingAndScriptsAndPlayground(),
            rootDirname: join(__dirname, 'samples'),
          }),
        )
        .then((knowledge) => knowledge?.map(({ content }) => ({ content })))
        .then((knowledge) => knowledge?.slice(0, 1)),
    ).resolves.toMatchObject([
      {
        content: expect.stringMatching(/Springfield (is )?.*/i),
      },
    ]));

  it('should NOT scrape irrelevant information', () =>
    expect(
      Promise.resolve()
        .then(() => makeKnowledgeSourceHandler(join(__dirname, 'samples/10-simple.pdf')))
        .then((options) =>
          pdfScraper.scrape(options, {
            llmTools: getLlmToolsForTestingAndScriptsAndPlayground(),
            rootDirname: join(__dirname, 'samples'),
          }),
        )
        .then((knowledge) => knowledge?.map(({ content }) => ({ content })))
        .then((knowledge) => knowledge?.slice(0, 1)),
    ).resolves.toMatchObject([
      {
        content: expect.not.stringMatching(/London (is )?.*/i),
      },
    ]));
});

/**
 * TODO: [ðŸ““] Maybe test all file in samples (not just 10-simple.pdf)
 */
